{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","newPerson","post","id","delete","toString","person","put","Filter","filter","handleNewFilter","value","onChange","PersonForm","newName","newNumber","handleNewName","handleNewNumber","addNewPerson","onSubmit","type","Persons","persons","handleDeletion","p","name","toLowerCase","includes","map","key","number","onClick","Notification","message","messageClass","isSuccess","className","App","useState","setPersons","useEffect","personService","then","response","data","setNewName","setNewNumber","setFilter","setMessage","event","target","preventDefault","console","log","find","window","confirm","setTimeout","catch","error","concat","errorMessage","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4735e849.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons/'\n\nconst getAll = () => {\n  return axios.get(baseUrl)\n}\n\nconst create = newPerson => {\n  return axios.post(baseUrl, newPerson)\n}\n\nconst deletePerson = id => {\n  return axios.delete(baseUrl + id.toString())\n}\n\nconst replacePerson = person => {\n  return axios.put(baseUrl + person.id.toString(), person)\n}\n\nexport default { getAll, create, deletePerson, replacePerson }","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(response => setPersons(response.data))\n  }, [])\n\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [filter, setFilter] = useState('')\n\n  const [message, setMessage] = useState(null)\n\n  const handleNewName = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNewNumber = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleNewFilter = (event) => {\n    setFilter(event.target.value)\n  }\n\n  const addNewPerson = (event) => {\n    event.preventDefault()\n    console.log(event.target)\n    if (persons.find(p => p.name === newName)) {\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        const person = { ...persons.find(p => p.name === newName) }\n        person.number = newNumber\n        personService\n          .replacePerson(person)\n          .then(() => {\n            personService\n              .getAll()\n              .then(response => setPersons(response.data))\n              .then(() => {\n                setNewName('')\n                setNewNumber('')\n                setMessage({ message: `Changed number for ${newName}`, isSuccess: true })\n                setTimeout(() => {\n                  setMessage(null)\n                }, 5000)\n              })\n\n          })\n          .catch(error => {\n            setMessage({ message: `Information of ${newName} has already been removed from server`, isSuccess: false })\n            setTimeout(() => {\n              setMessage(null)\n            }, 5000)\n          })\n      }\n    } else {\n      const newPerson = { name: newName, number: newNumber }\n      personService\n        .create(newPerson)\n        .then(response => {\n          setPersons(persons.concat([response.data]))\n          setNewName('')\n          setNewNumber('')\n          setMessage({ message: `Added ${newName}`, isSuccess: true })\n          setTimeout(() => {\n            setMessage(null)\n          }, 5000)\n        })\n        .catch(error => {\n          console.log(error.response.data)\n          let errorMessage = error.response.data\n          if(errorMessage.error){\n            errorMessage = errorMessage.error\n          }\n          setMessage({ message: `${errorMessage}`, isSuccess: false })\n          setTimeout(() => {\n            setMessage(null)\n          }, 5000)\n        })\n    }\n  }\n\n  const handleDeletion = (id) => {\n    if (window.confirm(`Delete ${persons.find(p => p.id === id).name}?`)) {\n      personService\n        .deletePerson(id)\n        .then(() => {\n          personService\n            .getAll()\n            .then(response => setPersons(response.data))\n        })\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} />\n      <Filter filter={filter} handleNewFilter={handleNewFilter} />\n      <h3>Add New Person</h3>\n      <PersonForm newName={newName} newNumber={newNumber} handleNewName={handleNewName} handleNewNumber={handleNewNumber} addNewPerson={addNewPerson} />\n      <h3>Numbers</h3>\n      <Persons persons={persons} filter={filter} handleDeletion={handleDeletion} />\n    </div>\n  )\n}\n\nconst Filter = ({ filter, handleNewFilter }) => (\n  <div>filter shown with <input value={filter} onChange={handleNewFilter} /></div>\n)\n\nconst PersonForm = ({ newName, newNumber, handleNewName, handleNewNumber, addNewPerson }) => (\n  <form onSubmit={addNewPerson}>\n    <div>\n      name: <input value={newName} onChange={handleNewName} />\n    </div>\n    <div>\n      number: <input value={newNumber} onChange={handleNewNumber} />\n    </div>\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n  </form>\n)\n\nconst Persons = ({ persons, filter, handleDeletion }) => (\n  <div>\n    {persons\n      .filter(p => p.name.toLowerCase().includes(filter.toLowerCase()))\n      .map(p => <p key={p.name}>{p.name} {p.number} <button onClick={() => handleDeletion(p.id)}>delete</button></p>)}\n  </div>\n)\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  const messageClass = message.isSuccess ? \"success\" : \"error\"\n\n  return (\n    <div className={messageClass}>\n      {message.message}\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}